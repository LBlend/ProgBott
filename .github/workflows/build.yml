name: Test And Build BOT
on: [push, pull_request]

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      CheckFiles: "launcher.py cogs/"

    steps:
      - uses: actions/checkout@v2.3.3
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 --select=E9,F63,F7,F82 --show-source

      - name: Check with Isort
        run: |
          pip install isort
          isort --check -sp setup.cfg $CheckFiles

      - name: Sort with Isort
        if: failure()
        run: |
          isort -sp setup.cfg $CheckFiles

      - name: Create Pull Request
        if: failure()
        uses: peter-evans/create-pull-request@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          branch: actions/auto
          commit-message: Changes done by tests
          committer: Roxedus <bot@roxedus.dev>
          title: Linter changed files

  build-and-push-container:
    if: github.event_name != 'pull_request' && contains(github.ref, 'actions') != 'true'
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.3
      - name: Create VARS
        env:
          _repo: ${{github.repository}}
          _ref: ${{github.ref}}
        id: vars
        run: |
          echo "::set-output name=branch::$(echo ${_ref} | cut -d/ -f3)"
          echo "::set-output name=username::$(echo ${_repo} | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"
          echo "::set-output name=repo::$(echo ${_repo} | tr '[:upper:]' '[:lower:]')"

      - name: Print VARS
        run: |
          echo "${{ steps.vars.outputs.branch }} && ${{github.ref}}"
          echo "${{ steps.vars.outputs.username }} && ${{github.repository}}"
          echo ${{ steps.vars.outputs.repo }}

      - name: Build the Docker image
        env:
          REPO: ${{ steps.vars.outputs.repo }}
          BRANCH: ${{ steps.vars.outputs.branch }}
        run: |
          docker build -t $REPO:$BRANCH -t $REPO:$BRANCH-${{ github.sha }} --build-arg VCS_REF=${{ github.ref	}} --build-arg BUILD_DATE=$(date --utc +%Y-%m-%d_%H) --build-arg VERSION=$(cat cogs/utils/Bot_version.py | cut -d \  -f3 | tr -d \") -f amd64.Dockerfile .

      - name: Tag :latest Docker image
        env:
          REPO: ${{ steps.vars.outputs.repo }}
          BRANCH: ${{ steps.vars.outputs.branch }}
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag $REPO:$BRANCH $REPO:latest

      - name: Login to registry
        if: github.event_name != 'pull_request' && contains(github.ref, 'actions') != 'true'
        env:
          DOCKER_USERNAME: ${{ steps.vars.outputs.username }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Pushes the Docker image
        env:
          REPO: ${{ steps.vars.outputs.repo }}
        if: github.event_name != 'pull_request' && contains(github.ref, 'actions') != 'true'
        run: docker push $REPO
